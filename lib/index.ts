import type { sbvrUtils } from '@balena/pinejs';
import * as fs from 'node:fs';

const modelText: string = fs.readFileSync('./saml.sbvr', 'utf8');

export const samlModel = {
	apiRoot: 'Auth',
	modelText,
	migrations: {
		'12.0.0-saml-add-saml-account': `
			CREATE TABLE IF NOT EXISTS "saml account" (
				"created at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
			,	"modified at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
			,	"id" SERIAL NOT NULL PRIMARY KEY
			,	"belongs to-user" INTEGER NOT NULL UNIQUE
			,	"was generated by-identity provider" INTEGER NOT NULL
			,	"remote id" VARCHAR(255) NOT NULL
			,	"display name" VARCHAR(255) NULL
			,	"email" TEXT NULL
			,	FOREIGN KEY ("belongs to-user") REFERENCES "user" ("id")
			,	FOREIGN KEY ("was generated by-identity provider") REFERENCES "identity provider" ("id")
			);
			
			DO
			$$
			BEGIN
			IF NOT EXISTS(
				SELECT 1
				FROM "information_schema"."triggers"
				WHERE "event_object_table" = 'saml account'
				AND "trigger_name" = 'saml account_trigger_update_modified_at'
			) THEN
				CREATE TRIGGER "saml account_trigger_update_modified_at"
				BEFORE UPDATE ON "saml account"
				FOR EACH ROW
				EXECUTE PROCEDURE "trigger_update_modified_at"();
			END IF;
			END;
			$$
		`,
		'12.0.1-saml-add-identity-provider': `
			CREATE TABLE IF NOT EXISTS "identity provider membership" (
				"created at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
			,	"modified at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
			,	"organization" INTEGER NOT NULL
			,	"is authorized by-identity provider" INTEGER NOT NULL
			,	"id" SERIAL NOT NULL PRIMARY KEY
			,	"grants access to-team" INTEGER NOT NULL
			,	FOREIGN KEY ("organization") REFERENCES "organization" ("id")
			,	FOREIGN KEY ("is authorized by-identity provider") REFERENCES "identity provider" ("id")
			,	FOREIGN KEY ("grants access to-team") REFERENCES "team" ("id")
			,	UNIQUE("organization", "is authorized by-identity provider")
			);
			
			DO
			$$
			BEGIN
			IF NOT EXISTS(
				SELECT 1
				FROM "information_schema"."triggers"
				WHERE "event_object_table" = 'identity provider membership'
				AND "trigger_name" = 'identity provider membership_trigger_update_modified_at'
			) THEN
				CREATE TRIGGER "identity provider membership_trigger_update_modified_at"
				BEFORE UPDATE ON "identity provider membership"
				FOR EACH ROW
				EXECUTE PROCEDURE "trigger_update_modified_at"();
			END IF;
			END;
			$$
		`
	},
} satisfies sbvrUtils.ExecutableModel;
